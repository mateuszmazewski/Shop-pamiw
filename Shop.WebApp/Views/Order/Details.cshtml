@model Shop.WebApp.Models.OrderVM
@using Shop.Core.Domain
@using X.PagedList
@using X.PagedList.Mvc.Core;
@{
    IPagedList<OrderItemVM> OrderItemsPagedList = ViewBag.OrderItemsPagedList as IPagedList<OrderItemVM>;
    double Total = ViewBag.Total;
}

@{
    String UnitOfMeasurementName(UnitOfMeasurement uom)
    {
        switch (uom)
        {
            case UnitOfMeasurement.Pieces: return "szt.";
            case UnitOfMeasurement.Kilogram: return "kg";
            case UnitOfMeasurement.Meter: return "m";
            default: return "";
        }
    }
}

<div>
    <h4>Szczegóły zamówienia</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CustomerId)
        </dt>
        <dd class="col-sm-10">
            [@Html.DisplayFor(model => model.Customer.Id)]
            @Html.DisplayFor(model => model.Customer.Name)
            @Html.DisplayFor(model => model.Customer.Surname)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PaymentId)
        </dt>
        <dd class="col-sm-10">
            @if (Model.PaymentId != 0)
            {
                @:[@Html.DisplayFor(model => model.PaymentId)]
                @:@Html.DisplayFor(model => model.Payment.Amount) zł;
                @:@Html.DisplayFor(model => model.Payment.PaymentMethod);
                @:@Html.DisplayFor(model => model.Payment.Status)
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CreatedAt)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CreatedAt)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.UpdatedAt)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UpdatedAt)
        </dd>
        <dt class="col-sm-2">
            Całkowita kwota zamówienia
        </dt>
        <dd class="col-sm-10">
            @Total zł
        </dd>
    </dl>
</div>
<a href="/OrderItem/Create/@Model.Id" class="btn btn-primary">Dodaj produkt do zamówienia</a>
<h3></h3>

@using (Html.BeginForm("Details", "Order", FormMethod.Get))
{
    <p>
        Wyszukaj produkt po nazwie:
        <br />
        @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Szukaj" />
    </p>

}

<table class="table">
    <tr>
        <th>
            Nazwa
        </th>
        <th>
            Cena
        </th>
        <th>
            Ilość
        </th>
        <th>
            Suma
        </th>
        <th></th>
    </tr>

    @foreach (var orderItem in OrderItemsPagedList)
    {
        <tr>
            <td>
                @orderItem.Product.Name
            </td>
            <td>
                @orderItem.Product.Price zł
            </td>
            <td>
                @orderItem.Quantity @UnitOfMeasurementName(orderItem.Product.UnitOfMeasurement)
            </td>
            <td>
                @{
                    double sum = orderItem.Product.Price * orderItem.Quantity;
                    sum = Math.Round(sum, 2);
                }
                @sum zł
            </td>
            <td>
                @Html.ActionLink("Usuń", "Delete", "OrderItem", new { id = orderItem.Id })
            </td>
        </tr>
    }

</table>
<br />

Strona @(OrderItemsPagedList.PageCount < OrderItemsPagedList.PageNumber ? 0 : OrderItemsPagedList.PageNumber) z @OrderItemsPagedList.PageCount
@Html.PagedListPager(OrderItemsPagedList, page => Url.Action("Details",
    new { page, currentFilter = ViewBag.CurrentFilter }))

<div>
    @Html.ActionLink("Edytuj zamówienie", "Edit", new { id = Model.Id }) |
    <a asp-action="Index">Powrót do listy zamówień</a>
</div>
